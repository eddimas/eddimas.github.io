---
interface Props {
  isCurrent?: boolean;
  title: string;
  company: string;
  startDate: string;
  endDate?: string;
  logo: string;
  responsibilities: string[];
  workLocation: "Remote" | "On-Site" | "Hybrid"
}

const { title, company, startDate, endDate, logo, responsibilities, isCurrent, workLocation } = Astro.props;

// Create date objects
const start = new Date(startDate);
const end = endDate ? new Date(endDate) : new Date();

// Initial calculations for year and month differences
let yearDifference = end.getFullYear() - start.getFullYear();
let monthDifference = end.getMonth() - start.getMonth();

// Check if end date is earlier in the year than start date
const isEndDateEarlierInYear = monthDifference < 0 || (monthDifference === 0 && end.getDate() < start.getDate());

if (isEndDateEarlierInYear) {
  yearDifference--;
  monthDifference += 12;
}

// The final number of years and months
const years = yearDifference;
const months = monthDifference;
---

<div class={`timeline-item ${isCurrent ? "active" : ""}`}>
  <img class="logo" width="40px" height="40px" src={logo} alt={company} />
  <div class="details">
    <div class="title">{title} <span class="sep">/</span> <span class="company">{company}</span> <span class="sep">/</span> <span class={`location ${workLocation}`}>{workLocation}</span></div>
    <p class="time">
      {startDate} - {endDate || "Present"} <span class="duration"> / {years > 0 && `${years}y`}{" "}{months > 0 && `${months}m`}</span>
    </p>
    <ul class="responsibilities">
      {responsibilities.map((responsibility) => (
        <li>{responsibility}</li>
      ))}
    </ul>
  </div>
</div>

<style lang="scss">
  .timeline-item {
    position: relative;
    gap: 1.5rem;
    display: flex;
    padding: 20px;
    background: rgb(227 255 233 / 5%);
    border-left: 10px solid;
    border-left-color: rgb(153 164 173 / 15%);
    border-bottom: 1px solid rgb(153 164 173 / 15%);
    &.active {
      border-left-color: rgb(134 255 160 / 30%);
    }
  }

  .title {
    display: flex;
    align-items: center;
    column-gap: 5px;
    flex-wrap: wrap;
    font-size: var(--font-size-2xl);
    color: var(--color-silver-200);
    font-weight: 600;
  }

  .time {
    color: var(--color-silver-300);
    font-size: var(--font-size-base);
    font-family: var(--font-family-IBM-Plex-Mono);
    margin-top: 0;
  }

  .duration {
    font-size: var(--font-size-sm);
    color: var(--color-silver-400);
  }

  .company {
    font-size: var(--font-size-lg);
    color: var(--color-silver-300);
  }

  .location {
    font-size: var(--font-size-sm);
    background: rgb(63, 63, 63);
    color: white;
    padding: 1px 10px;
    border-radius: 4px;
  }

  .location.Remote {
    background: #73007e;
  }

  .location.On-Site {
    background: #0048b3;
  }

  .location.Hybrid {
    background: #0089b3;
  }

  .sep {
    margin: 0 2.5px;
    color: var(--color-silver-800);
  }

  .responsibilities {
    color: var(--color-silver-400);
    font-size: var(--font-size-lg);
  }

  .logo {
    background: white;
    padding: 5px;
    border-radius: 4px;
  }

  .responsibilities {
    padding-left: 15px;
    line-height: 1.5rem;
    li {
      margin: 8px 0;
      &::marker {
        content: "â–º   ";
        color: var(--color-mint);
      }
    }
  }

  @media screen and (max-width: 980px) {
    .timeline-item {
      flex-direction: column;
      margin: 0 -25px;
      border-width: 5px;
    }

    .title {
      font-size: var(--font-size-lg);
      column-gap: 15px;
      row-gap: 5px;
      margin-bottom: 15px;
    }

    .company {
      font-size: var(--font-size-md);
    }

    .sep {
      display: none;
    }

    .time {
      font-size: var(--font-size-sm);
    }

    .responsibilities {
      font-size: var(--font-size-md);
      line-height: 1.5rem;
    }
  }
</style>